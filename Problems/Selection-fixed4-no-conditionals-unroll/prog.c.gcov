        -:    0:Source:prog.c
        -:    0:Graph:prog.gcno
        -:    0:Data:prog.gcda
        -:    0:Runs:5
        -:    1://@Template Author: Richard Veras
        -:    2://@author Joseph Rodriguez Ben Cruickshank
        -:    3:
        -:    4://Refrence for selection sort algorithm:
        -:    5://https://www.geeksforgeeks.org/dsa/selection-sort-algorithm-2/
        -:    6:
        -:    7:/*
        -:    8:  This is a small program to demonstrate gcov. It
        -:    9:  can take no arguments or 1 argument. It prints
        -:   10:  a message if more than one is given. If the argument's
        -:   11:  value is odd it prints out odd, otherwise even
        -:   12:  The goal is to show you need multiple test cases
        -:   13:  to cover all of the code.
        -:   14:  -richard.m.veras@ou.edu
        -:   15:*/
        -:   16:#include <stdio.h>
        -:   17:#include <stdlib.h>
        -:   18:
        -:   19:void selectionSort(float arr[], int n);
        -:   20:void swap(float *x, float *y);
        -:   21:
        5:   22:int main(int argc, char * argv[]) {
        -:   23:  // No arguments passed
        -:   24:  // note: argv[0] is the name of the
        -:   25:  // program, so we always have at least
        -:   26:  // 1 value in argv.
        5:   27:  if (argc != 3)
        -:   28:  {
        1:   29:    printf("Error: Please exactly two arguments.\n");
        1:   30:    printf("Format: %s input_name.extenstion output_name.extension \n", argv[0]);
        1:   31:    return 1;
        -:   32:  }
        -:   33:
        -:   34:
        4:   35:  FILE *input = fopen(argv[1], "r"); // opens the input file based on first execution argument with read permission.
        4:   36:  if (input == NULL)
        -:   37:  { // error handling for file opening. This may be removed to check for coverage.
        1:   38:    printf("Error opening input file.\n");
        1:   39:    return 1;
        -:   40:  }
        -:   41:
        3:   42:  int n = 4; // Variable to hold the size of the array.
        -:   43:  float val; // Variable to hold each float value read from the file.
        -:   44:  
        3:   45:  float *arr = malloc(n * sizeof(float));
        -:   46:  // Removed arr == null to check for coverage.
        -:   47:  // An invalid n value would cause malloc to return null but this is allready checked for above.
        -:   48:
        -:   49:  // Write the array elements from the file into the array.
        -:   50:  // fscan picks up where it left off skipping the int determining the size of the array.
       15:   51:  for (int i = 0; i < n; i++)
        -:   52:  {
       12:   53:    fscanf(input, "%f", &arr[i]);
        -:   54:  }
        -:   55:
        -:   56:
        -:   57:  //Selection sort function call.
        -:   58:  //Sorting algorithm documentation link is above.
        3:   59:  selectionSort(arr,n);
        -:   60:  
        -:   61:  //Prints Sorted Array to the console.
       15:   62:  for(int i = 0; i < n; i++)
        -:   63:  {
       12:   64:    printf("%2f ", arr[i]);
        -:   65:  }
        3:   66:  printf("\n");
        -:   67:
        3:   68:  FILE *output = fopen(argv[2], "w"); // argv[2] is the output file given from exercution arguments.
        3:   69:  if (output == NULL){
        1:   70:    free(arr);
        1:   71:    fclose(input);
        1:   72:    printf("Error writing output file.\n");
        1:   73:    return 1;
        -:   74:  }
        -:   75:  // Write the sorted array to the output file.
       10:   76:  for (int i = 0; i < n; i++) {
        8:   77:    fprintf(output, "%.2f\n", arr[i]);  // one float per line
        -:   78:  }
        2:   79:  printf("\n");
        2:   80:  free(arr); // Free the allocated memory for the array.
        2:   81:  fclose(input); // Close the input file.  
        2:   82:  return 0;
        -:   83:}
        -:   84:
        -:   85:
        -:   86://Unroll loop using if statements because we know n = 4
        -:   87://We simply preform the same comparisons and swaps that would be done in the loop
        -:   88://but without the iterations or memory required for looping.
        3:   89:void selectionSort(float arr[], int n) {
        3:   90:    int min = 0;
        -:   91:    // i = 0
        3:   92:    min = 0;
       3*:   93:    if (arr[1] < arr[min]) min = 1;
       3*:   94:    if (arr[2] < arr[min]) min = 2;
       3*:   95:    if (arr[3] < arr[min]) min = 3;
        3:   96:    swap(&arr[min], &arr[0]);
        -:   97:
        -:   98:    // i = 1
        3:   99:    min = 1;
       3*:  100:    if (arr[2] < arr[min]) min = 2;
       3*:  101:    if (arr[3] < arr[min]) min = 3;
        3:  102:    swap(&arr[min], &arr[1]);
        -:  103:
        -:  104:    // i = 2
        3:  105:    min = 2;
        3:  106:    if (arr[3] < arr[min]) min = 3;
        3:  107:    swap(&arr[min], &arr[2]);
        3:  108:}
        -:  109:
        9:  110:void swap(float *x, float *y) {
        9:  111:    float temp = *x;
        9:  112:    *x = *y;
        9:  113:    *y = temp;
        9:  114:}
